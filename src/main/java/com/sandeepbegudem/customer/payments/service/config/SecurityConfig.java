package com.sandeepbegudem.customer.payments.service.config;import com.sandeepbegudem.customer.payments.service.security.JwtAuthenticationEntryPoint;import com.sandeepbegudem.customer.payments.service.security.JwtAuthenticationFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configurationpublic class SecurityConfig {    @Autowired    private JwtAuthenticationEntryPoint point;    @Autowired    private JwtAuthenticationFilter filter;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {//"/api/v1/authenticate/login"        // "/api/v1/customers"        http.csrf(csrf -> csrf.disable())                .authorizeRequests().                requestMatchers("/api/v1/customers/", "/auth/customers/")                .authenticated()                .requestMatchers("/api/v1/authenticate/login")                .permitAll()                .anyRequest()                .authenticated()                .and()                .exceptionHandling(ex -> ex.authenticationEntryPoint(point))                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));        http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);        return http.build();    }}