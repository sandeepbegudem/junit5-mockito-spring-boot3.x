package com.sandeepbegudem.customer.payments.service.advice;import com.sandeepbegudem.customer.payments.service.exception.CustomerNotFoundException;import com.sandeepbegudem.customer.payments.service.exception.PaymentNotFoundException;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.MethodArgumentNotValidException;import org.springframework.web.bind.annotation.*;import org.springframework.web.client.HttpServerErrorException;import java.util.HashMap;import java.util.Map;@RestControllerAdvicepublic class ApplicationExceptionHandler {    @ResponseStatus(HttpStatus.BAD_REQUEST)    @ExceptionHandler(MethodArgumentNotValidException.class)    public Map<String, String> handleInvalidArgument(MethodArgumentNotValidException ex) {        Map<String, String> errorMap = new HashMap<>();        ex.getBindingResult().getFieldErrors().forEach(error -> {            errorMap.put(error.getField(), error.getDefaultMessage());        });        return errorMap;    }    @ResponseStatus(HttpStatus.NOT_FOUND)    @ExceptionHandler(CustomerNotFoundException.class)    public Map<String, String> handleBusinessException(CustomerNotFoundException ex) {        Map<String, String> errorMap = new HashMap<>();        errorMap.put("errorMessage", ex.getMessage());        return errorMap;    }    @ExceptionHandler(HttpServerErrorException.InternalServerError.class)    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)    @ResponseBody    public ResponseEntity<String> handleGlobalException(HttpServerErrorException.InternalServerError ex) {        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ex.getMessage());    }    @ExceptionHandler(PaymentNotFoundException.class)    @ResponseStatus(HttpStatus.NOT_FOUND)    @ResponseBody    public ResponseEntity<Object> handlePaymentNotFoundException(PaymentNotFoundException ex) {        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());    }}